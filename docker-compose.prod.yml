version: '3.8'

services:
  # KumoMTA UI Frontend with SSL
  kumomta-ui:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: kumomta-ui-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-https://api.kumomta.local}
      - VITE_ENABLE_WEBSOCKET=${VITE_ENABLE_WEBSOCKET:-true}
      - VITE_FORCE_HTTPS=true
      - VITE_ENABLE_PERFORMANCE_MONITORING=true
      - VITE_ENABLE_ERROR_TRACKING=true
      - VITE_LOG_LEVEL=warn
    volumes:
      # SSL certificates
      - ./certs:/etc/nginx/certs:ro
      # Production nginx configuration
      - ./config/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      # Nginx logs
      - nginx-logs:/var/log/nginx
      # Let's Encrypt challenges
      - letsencrypt-webroot:/var/www/certbot:ro
    networks:
      - kumomta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "--no-check-certificate", "https://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kumomta-backend:
        condition: service_healthy
    labels:
      - "com.kumomta.description=KumoMTA UI Frontend"
      - "com.kumomta.service=frontend"
      - "com.kumomta.environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: kumomta-certbot
    volumes:
      - ./certs:/etc/letsencrypt
      - letsencrypt-webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --quiet; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - kumomta-network
    labels:
      - "com.kumomta.description=SSL Certificate Manager"
      - "com.kumomta.service=certbot"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # KumoMTA Backend
  kumomta-backend:
    image: ${KUMOMTA_IMAGE:-kumomta/kumomta:latest}
    container_name: kumomta-backend-prod
    ports:
      - "8000:8000"
      - "25:25"    # SMTP
      - "587:587"  # Submission
      - "465:465"  # SMTPS
    networks:
      - kumomta-network
    restart: unless-stopped
    volumes:
      - kumomta-data:/var/spool/kumomta
      - kumomta-logs:/var/log/kumomta
      - kumomta-config:/etc/kumomta
    environment:
      - KUMOMTA_CONFIG=/etc/kumomta/config.toml
      - KUMOMTA_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    labels:
      - "com.kumomta.description=KumoMTA Email Server"
      - "com.kumomta.service=backend"
      - "com.kumomta.environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: kumomta-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - kumomta-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    labels:
      - "com.kumomta.description=Redis Cache"
      - "com.kumomta.service=cache"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: kumomta-prometheus
    ports:
      - "9090:9090"
    networks:
      - kumomta-network
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "com.kumomta.description=Prometheus Metrics"
      - "com.kumomta.service=monitoring"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kumomta-grafana
    ports:
      - "3001:3000"
    networks:
      - kumomta-network
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "com.kumomta.description=Grafana Dashboard"
      - "com.kumomta.service=visualization"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

networks:
  kumomta-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  kumomta-data:
    driver: local
  kumomta-logs:
    driver: local
  kumomta-config:
    driver: local
  nginx-logs:
    driver: local
  letsencrypt-webroot:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
