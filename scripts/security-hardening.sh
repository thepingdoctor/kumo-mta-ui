#!/bin/bash
#
# KumoMTA UI Security Hardening Script
# This script hardens the security of the KumoMTA UI server
#
# Usage: sudo ./security-hardening.sh
#
# WARNING: Review and customize this script before running in production!
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}KumoMTA UI Security Hardening Script${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Error: This script must be run as root${NC}"
  exit 1
fi

# Backup directory
BACKUP_DIR="/var/backups/kumomta-security-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"
echo -e "${GREEN}[✓]${NC} Created backup directory: $BACKUP_DIR"

# ============================================
# 1. GENERATE SECURE SESSION SECRETS
# ============================================
echo ""
echo -e "${YELLOW}[1/9]${NC} Generating secure session secrets..."

SESSION_SECRET=$(openssl rand -base64 64 | tr -d '\n')
CSRF_SECRET=$(openssl rand -base64 64 | tr -d '\n')
JWT_SECRET=$(openssl rand -base64 64 | tr -d '\n')

ENV_FILE="/opt/kumomta-ui/.env"
if [ -f "$ENV_FILE" ]; then
  cp "$ENV_FILE" "$BACKUP_DIR/.env.backup"
  echo -e "${GREEN}[✓]${NC} Backed up existing .env file"
fi

cat > "$ENV_FILE" << EOF
# Auto-generated security configuration
# Generated: $(date)

# Session Security
SESSION_SECRET=$SESSION_SECRET
CSRF_SECRET=$CSRF_SECRET
JWT_SECRET=$JWT_SECRET

# Session Configuration
VITE_SESSION_TIMEOUT=3600000
VITE_ENABLE_CSRF=true
VITE_FORCE_HTTPS=true

# Security Headers
VITE_ENABLE_SECURITY_HEADERS=true
VITE_CSP_ENABLED=true

# API Security
VITE_API_TIMEOUT=30000
VITE_MAX_REQUEST_SIZE=10485760

# Rate Limiting
VITE_ENABLE_RATE_LIMITING=true
VITE_RATE_LIMIT_WINDOW=900000
VITE_RATE_LIMIT_MAX_REQUESTS=100
EOF

chmod 600 "$ENV_FILE"
echo -e "${GREEN}[✓]${NC} Generated secure secrets and updated .env"

# ============================================
# 2. CONFIGURE SECURE HTTP HEADERS
# ============================================
echo ""
echo -e "${YELLOW}[2/9]${NC} Configuring secure HTTP headers..."

NGINX_CONF="/etc/nginx/sites-available/kumomta-ui"
if [ -f "$NGINX_CONF" ]; then
  cp "$NGINX_CONF" "$BACKUP_DIR/nginx.conf.backup"
fi

cat > "$NGINX_CONF" << 'EOF'
# KumoMTA UI - Hardened Nginx Configuration
# Generated by security-hardening.sh

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

server {
    listen 80;
    server_name _;

    # Redirect all HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name kumomta.example.com;

    # SSL Configuration
    ssl_certificate /etc/ssl/certs/kumomta-ui.crt;
    ssl_certificate_key /etc/ssl/private/kumomta-ui.key;

    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # SSL session cache
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;

    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.kumomta.example.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'" always;

    # Hide Nginx version
    server_tokens off;

    # Connection limits
    limit_conn conn_limit 10;

    root /usr/share/nginx/html;
    index index.html;

    # Block common attack patterns
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Login endpoint with strict rate limiting
    location /api/auth/login {
        limit_req zone=login_limit burst=3 nodelay;
        proxy_pass http://kumomta-backend:8000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
    }

    # API proxy with rate limiting
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;

        # CORS headers (customize for your domain)
        add_header Access-Control-Allow-Origin "https://kumomta.example.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-CSRF-Token" always;
        add_header Access-Control-Allow-Credentials "true" always;

        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_pass http://kumomta-backend:8000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # SPA routing
    location / {
        try_files $uri $uri/ /index.html;

        # Cache control for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Static assets with aggressive caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;
}
EOF

ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/kumomta-ui
echo -e "${GREEN}[✓]${NC} Configured secure HTTP headers in Nginx"

# ============================================
# 3. SETUP FAIL2BAN
# ============================================
echo ""
echo -e "${YELLOW}[3/9]${NC} Setting up Fail2ban..."

if ! command -v fail2ban-client &> /dev/null; then
  echo -e "${YELLOW}Installing Fail2ban...${NC}"
  apt-get update -qq
  apt-get install -y -qq fail2ban
fi

cat > /etc/fail2ban/jail.d/kumomta-ui.conf << 'EOF'
# KumoMTA UI Fail2ban Configuration

[kumomta-ui-auth]
enabled = true
port = http,https
filter = kumomta-ui-auth
logpath = /var/log/nginx/access.log
maxretry = 5
findtime = 600
bantime = 3600
action = iptables-multiport[name=kumomta-ui, port="http,https", protocol=tcp]

[kumomta-ui-dos]
enabled = true
port = http,https
filter = kumomta-ui-dos
logpath = /var/log/nginx/access.log
maxretry = 100
findtime = 60
bantime = 600
action = iptables-multiport[name=kumomta-ui-dos, port="http,https", protocol=tcp]
EOF

cat > /etc/fail2ban/filter.d/kumomta-ui-auth.conf << 'EOF'
# Fail2ban filter for KumoMTA UI authentication failures

[Definition]
failregex = ^<HOST> .* "POST /api/auth/login HTTP.*" (401|403)
            ^<HOST> .* "POST /login HTTP.*" (401|403)
ignoreregex =
EOF

cat > /etc/fail2ban/filter.d/kumomta-ui-dos.conf << 'EOF'
# Fail2ban filter for KumoMTA UI DoS attempts

[Definition]
failregex = ^<HOST> .*
ignoreregex =
EOF

systemctl enable fail2ban
systemctl restart fail2ban
echo -e "${GREEN}[✓]${NC} Configured and started Fail2ban"

# ============================================
# 4. CONFIGURE UFW FIREWALL
# ============================================
echo ""
echo -e "${YELLOW}[4/9]${NC} Configuring UFW firewall..."

if ! command -v ufw &> /dev/null; then
  echo -e "${YELLOW}Installing UFW...${NC}"
  apt-get install -y -qq ufw
fi

# Reset UFW to default
ufw --force reset

# Default policies
ufw default deny incoming
ufw default allow outgoing

# Allow SSH (customize port if needed)
ufw allow 22/tcp comment 'SSH'

# Allow HTTP and HTTPS
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'

# Allow KumoMTA SMTP ports (if on same server)
ufw allow 25/tcp comment 'SMTP'
ufw allow 587/tcp comment 'SMTP Submission'
ufw allow 465/tcp comment 'SMTP SSL'

# Enable UFW
echo "y" | ufw enable

ufw status numbered
echo -e "${GREEN}[✓]${NC} Configured UFW firewall"

# ============================================
# 5. DISABLE UNNECESSARY SERVICES
# ============================================
echo ""
echo -e "${YELLOW}[5/9]${NC} Disabling unnecessary services..."

# List of potentially unnecessary services
SERVICES_TO_DISABLE=(
  "bluetooth"
  "cups"
  "avahi-daemon"
)

for service in "${SERVICES_TO_DISABLE[@]}"; do
  if systemctl list-unit-files | grep -q "$service"; then
    systemctl disable "$service" 2>/dev/null || true
    systemctl stop "$service" 2>/dev/null || true
    echo -e "  ${GREEN}[✓]${NC} Disabled $service"
  fi
done

echo -e "${GREEN}[✓]${NC} Disabled unnecessary services"

# ============================================
# 6. SET CORRECT FILE PERMISSIONS
# ============================================
echo ""
echo -e "${YELLOW}[6/9]${NC} Setting secure file permissions..."

# Application directory permissions
APP_DIR="/opt/kumomta-ui"
if [ -d "$APP_DIR" ]; then
  chown -R www-data:www-data "$APP_DIR"
  find "$APP_DIR" -type d -exec chmod 755 {} \;
  find "$APP_DIR" -type f -exec chmod 644 {} \;
  chmod 600 "$APP_DIR/.env" 2>/dev/null || true
  echo -e "${GREEN}[✓]${NC} Set application directory permissions"
fi

# Nginx configuration permissions
chmod 644 /etc/nginx/sites-available/*
chmod 644 /etc/nginx/nginx.conf
echo -e "${GREEN}[✓]${NC} Set Nginx configuration permissions"

# SSL certificate permissions
if [ -d "/etc/ssl/private" ]; then
  chmod 700 /etc/ssl/private
  find /etc/ssl/private -type f -exec chmod 600 {} \;
  echo -e "${GREEN}[✓]${NC} Set SSL certificate permissions"
fi

# Log directory permissions
mkdir -p /var/log/kumomta-ui
chown www-data:www-data /var/log/kumomta-ui
chmod 750 /var/log/kumomta-ui
echo -e "${GREEN}[✓]${NC} Set log directory permissions"

# ============================================
# 7. CONFIGURE SYSTEM SECURITY
# ============================================
echo ""
echo -e "${YELLOW}[7/9]${NC} Configuring system security settings..."

# Kernel security parameters
cat > /etc/sysctl.d/99-kumomta-security.conf << 'EOF'
# KumoMTA UI Security Settings

# IP Forwarding
net.ipv4.ip_forward = 0
net.ipv6.conf.all.forwarding = 0

# SYN cookies protection
net.ipv4.tcp_syncookies = 1

# Ignore ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0

# Ignore source-routed packets
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0

# Log Martians
net.ipv4.conf.all.log_martians = 1

# Ignore ICMP ping
net.ipv4.icmp_echo_ignore_all = 0

# Increase system file descriptor limit
fs.file-max = 65535

# Increase TCP buffer sizes
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
EOF

sysctl -p /etc/sysctl.d/99-kumomta-security.conf > /dev/null
echo -e "${GREEN}[✓]${NC} Applied kernel security parameters"

# ============================================
# 8. SETUP AUTOMATIC SECURITY UPDATES
# ============================================
echo ""
echo -e "${YELLOW}[8/9]${NC} Setting up automatic security updates..."

if ! command -v unattended-upgrade &> /dev/null; then
  apt-get install -y -qq unattended-upgrades apt-listchanges
fi

cat > /etc/apt/apt.conf.d/50unattended-upgrades << 'EOF'
Unattended-Upgrade::Allowed-Origins {
    "${distro_id}:${distro_codename}-security";
    "${distro_id}ESMApps:${distro_codename}-apps-security";
    "${distro_id}ESM:${distro_codename}-infra-security";
};
Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
Unattended-Upgrade::Automatic-Reboot-Time "03:00";
EOF

cat > /etc/apt/apt.conf.d/20auto-upgrades << 'EOF'
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
EOF

systemctl enable unattended-upgrades
systemctl start unattended-upgrades
echo -e "${GREEN}[✓]${NC} Configured automatic security updates"

# ============================================
# 9. RESTART SERVICES
# ============================================
echo ""
echo -e "${YELLOW}[9/9]${NC} Restarting services..."

# Validate Nginx configuration
nginx -t
if [ $? -eq 0 ]; then
  systemctl restart nginx
  echo -e "${GREEN}[✓]${NC} Restarted Nginx"
else
  echo -e "${RED}[✗]${NC} Nginx configuration test failed - not restarting"
fi

systemctl restart fail2ban
echo -e "${GREEN}[✓]${NC} Restarted Fail2ban"

# ============================================
# COMPLETION SUMMARY
# ============================================
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Security Hardening Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Summary of changes:"
echo "  [✓] Generated secure session secrets"
echo "  [✓] Configured security headers (HSTS, CSP, X-Frame-Options, etc.)"
echo "  [✓] Setup Fail2ban with custom rules"
echo "  [✓] Configured UFW firewall"
echo "  [✓] Disabled unnecessary services"
echo "  [✓] Set secure file permissions"
echo "  [✓] Applied kernel security parameters"
echo "  [✓] Configured automatic security updates"
echo ""
echo "Backups saved to: $BACKUP_DIR"
echo ""
echo -e "${YELLOW}IMPORTANT NEXT STEPS:${NC}"
echo "  1. Update server_name in /etc/nginx/sites-available/kumomta-ui"
echo "  2. Install SSL certificates (see docs/SSL_TLS_SETUP.md)"
echo "  3. Customize IP whitelist (see scripts/manage-ip-whitelist.sh)"
echo "  4. Review and test all security settings"
echo "  5. Run security audit: scripts/security-audit.sh"
echo ""
echo -e "${YELLOW}WARNING:${NC} Review all settings before using in production!"
echo ""
